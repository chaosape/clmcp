DESIGN
==

1. in python / cog: stuff handled by Lmcpgen

2. statically in C: almost everything handled by client code
3. generated in C: rest of client code

(complete package in C)

4. Very thin wrapper over C code in C++ / java / other stuff (will involve code generated in parallel)


What exists so far
==

API for UxAS
---

(see if I can get rid of factory)

for each class:
       - initialization/ destruction
       - pack / unpack
       - calculatePackedSize
       - toString (toXML never used)
       - getLmcpType / getLmcpTypeName
       - clone
       - getSeriesName / getSeriesNameAsLong (handled by constants)
       - getSeriesVersion (handled by constants)


Common C++ initial generated code
---
-- Buffer
-- Factory abstraction
-- Object base

Scrapped: all common XML routines

Per-object C++ generated code
---

-- Per-object definition: for S,
    -- static subs
    -- S::isS(Object* o)
    -- for each class things above (all are virtual)
    -- member fields / getters and setters

Scrapped: all xml related stuff



C design
===

move a bunch of virtual things to generic function
instead of S::isS(Object* o) use lmcp_gettype(Object* o)

generic calculate_packed_size


need to support polymorphism in C++ layer


Verification
===

verify c code after generation with SAW

verify generators:
    - generator for calculate_packed_size
    - 


serialization format: must start with
lmcp control
length
start of struct
